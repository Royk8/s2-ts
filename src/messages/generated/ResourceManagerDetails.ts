/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * ID of this message
 */
export type ID = string;
/**
 * Identifier of the Resource Manager. Must be unique within the scope of the CEM.
 */
export type ID1 = string;
/**
 * Role type of the Resource Manager for the given commodity
 */
export type RoleType = "ENERGY_PRODUCER" | "ENERGY_CONSUMER" | "ENERGY_STORAGE";
/**
 * Commodity the role refers to.
 */
export type Commodity = "GAS" | "HEAT" | "ELECTRICITY" | "OIL";
/**
 * The average time the combination of Resource Manager and HBES/BACS/SASS or (Smart) device needs to process and execute an instruction
 */
export type Duration = number;
/**
 * POWER_ENVELOPE_BASED_CONTROL: Identifier for the Power Envelope Based Control type
 * POWER_PROFILE_BASED_CONTROL: Identifier for the Power Profile Based Control type
 * OPERATION_MODE_BASED_CONTROL: Identifier for the Operation Mode Based Control type
 * FILL_RATE_BASED_CONTROL: Identifier for the Demand Driven Based Control type
 * DEMAND_DRIVEN_BASED_CONTROL: Identifier for the Fill Rate Based Control type
 * NOT_CONTROLABLE: Identifier that is to be used if no control is possible. Resources of this type can still provide measurements and forecast
 * NO_SELECTION: Identifier that is to be used if no control type is or has been selected.
 */
export type ControlType =
  | "POWER_ENVELOPE_BASED_CONTROL"
  | "POWER_PROFILE_BASED_CONTROL"
  | "OPERATION_MODE_BASED_CONTROL"
  | "FILL_RATE_BASED_CONTROL"
  | "DEMAND_DRIVEN_BASED_CONTROL"
  | "NOT_CONTROLABLE"
  | "NO_SELECTION";
/**
 * Currency to be used for all information regarding costs. Mandatory if cost information is published.
 */
export type Currency =
  | "AED"
  | "ANG"
  | "AUD"
  | "CHE"
  | "CHF"
  | "CHW"
  | "EUR"
  | "GBP"
  | "LBP"
  | "LKR"
  | "LRD"
  | "LSL"
  | "LYD"
  | "MAD"
  | "MDL"
  | "MGA"
  | "MKD"
  | "MMK"
  | "MNT"
  | "MOP"
  | "MRO"
  | "MUR"
  | "MVR"
  | "MWK"
  | "MXN"
  | "MXV"
  | "MYR"
  | "MZN"
  | "NAD"
  | "NGN"
  | "NIO"
  | "NOK"
  | "NPR"
  | "NZD"
  | "OMR"
  | "PAB"
  | "PEN"
  | "PGK"
  | "PHP"
  | "PKR"
  | "PLN"
  | "PYG"
  | "QAR"
  | "RON"
  | "RSD"
  | "RUB"
  | "RWF"
  | "SAR"
  | "SBD"
  | "SCR"
  | "SDG"
  | "SEK"
  | "SGD"
  | "SHP"
  | "SLL"
  | "SOS"
  | "SRD"
  | "SSP"
  | "STD"
  | "SYP"
  | "SZL"
  | "THB"
  | "TJS"
  | "TMT"
  | "TND"
  | "TOP"
  | "TRY"
  | "TTD"
  | "TWD"
  | "TZS"
  | "UAH"
  | "UGX"
  | "USD"
  | "USN"
  | "UYI"
  | "UYU"
  | "UZS"
  | "VEF"
  | "VND"
  | "VUV"
  | "WST"
  | "XAG"
  | "XAU"
  | "XBA"
  | "XBB"
  | "XBC"
  | "XBD"
  | "XCD"
  | "XOF"
  | "XPD"
  | "XPF"
  | "XPT"
  | "XSU"
  | "XTS"
  | "XUA"
  | "XXX"
  | "YER"
  | "ZAR"
  | "ZMW"
  | "ZWL";
/**
 * ELECTRIC.POWER.L1: Electric power described in Watt on phase 1. If a device utilizes only one phase it should always use L1.
 * ELECTRIC.POWER.L2: Electric power described in Watt on phase 2. Only applicable for 3 phase devices.
 * ELECTRIC.POWER.L3: Electric power described in Watt on phase 3. Only applicable for 3 phase devices.
 * ELECTRIC.POWER.3_PHASE_SYMMETRIC: Electric power described in Watt on when power is equally shared among the three phases. Only applicable for 3 phase devices.
 * NATURAL_GAS.FLOW_RATE: Gas flow rate described in liters per second
 * HYDROGEN.FLOW_RATE: Gas flow rate described in grams per second
 * HEAT.TEMPERATURE: Heat described in degrees Celsius
 * HEAT.FLOW_RATE: Flow rate of heat carrying gas or liquid in liters per second
 * HEAT.THERMAL_POWER: Thermal power in Watt
 * OIL.FLOW_RATE: Oil flow rate described in liters per hour
 */
export type CommodityQuantity =
  | "ELECTRIC.POWER.L1"
  | "ELECTRIC.POWER.L2"
  | "ELECTRIC.POWER.L3"
  | "ELECTRIC.POWER.3_PHASE_SYMMETRIC"
  | "NATURAL_GAS.FLOW_RATE"
  | "HYDROGEN.FLOW_RATE"
  | "HEAT.TEMPERATURE"
  | "HEAT.FLOW_RATE"
  | "HEAT.THERMAL_POWER"
  | "OIL.FLOW_RATE";

export interface ResourceManagerDetails {
  message_type: "ResourceManagerDetails";
  message_id: ID;
  resource_id: ID1;
  /**
   * Human readable name given by user
   */
  name?: string;
  /**
   * Each Resource Manager provides one or more energy Roles
   *
   * @minItems 1
   * @maxItems 3
   */
  roles: [Role] | [Role, Role] | [Role, Role, Role];
  /**
   * Name of Manufacturer
   */
  manufacturer?: string;
  /**
   * Name of the model of the device (provided by the manufacturer)
   */
  model?: string;
  /**
   * Serial number of the device (provided by the manufacturer)
   */
  serial_number?: string;
  /**
   * Version identifier of the firmware used in the device (provided by the manufacturer)
   */
  firmware_version?: string;
  instruction_processing_delay: Duration;
  /**
   * The control types supported by this Resource Manager.
   *
   * @minItems 1
   * @maxItems 5
   */
  available_control_types:
    | [ControlType]
    | [ControlType, ControlType]
    | [ControlType, ControlType, ControlType]
    | [ControlType, ControlType, ControlType, ControlType]
    | [ControlType, ControlType, ControlType, ControlType, ControlType];
  currency?: Currency;
  /**
   * Indicates whether the ResourceManager is able to provide PowerForecasts
   */
  provides_forecast: boolean;
  /**
   * Array of all CommodityQuantities that this Resource Manager can provide measurements for.
   *
   * @minItems 1
   * @maxItems 10
   */
  provides_power_measurement_types:
    | [CommodityQuantity]
    | [CommodityQuantity, CommodityQuantity]
    | [CommodityQuantity, CommodityQuantity, CommodityQuantity]
    | [CommodityQuantity, CommodityQuantity, CommodityQuantity, CommodityQuantity]
    | [CommodityQuantity, CommodityQuantity, CommodityQuantity, CommodityQuantity, CommodityQuantity]
    | [CommodityQuantity, CommodityQuantity, CommodityQuantity, CommodityQuantity, CommodityQuantity, CommodityQuantity]
    | [
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity
      ]
    | [
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity
      ]
    | [
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity
      ]
    | [
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity,
        CommodityQuantity
      ];
}
export interface Role {
  role: RoleType;
  commodity: Commodity;
}
